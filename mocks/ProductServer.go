// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	product "github.com/iamgadfly/go-echo-api/pkg/api/product_v1/proto"
	mock "github.com/stretchr/testify/mock"
)

// ProductServer is an autogenerated mock type for the ProductServer type
type ProductServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ProductServer) Create(_a0 context.Context, _a1 *product.CreateRequest) (*product.ProductResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *product.ProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateRequest) (*product.ProductResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateRequest) *product.ProductResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *ProductServer) GetById(_a0 context.Context, _a1 *product.GetByIdRequest) (*product.ProductResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *product.ProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetByIdRequest) (*product.ProductResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.GetByIdRequest) *product.ProductResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.GetByIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *ProductServer) Search(_a0 context.Context, _a1 *product.SearchRequest) (*product.ProductListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *product.ProductListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.SearchRequest) (*product.ProductListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.SearchRequest) *product.ProductListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ProductListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.SearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedProductServer provides a mock function with given fields:
func (_m *ProductServer) mustEmbedUnimplementedProductServer() {
	_m.Called()
}

// NewProductServer creates a new instance of ProductServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServer {
	mock := &ProductServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
