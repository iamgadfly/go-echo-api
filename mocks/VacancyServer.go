// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	vacancy "github.com/iamgadfly/go-echo-api/pkg/api/vacancy_v1/proto"
	mock "github.com/stretchr/testify/mock"
)

// VacancyServer is an autogenerated mock type for the VacancyServer type
type VacancyServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *VacancyServer) Create(_a0 context.Context, _a1 *vacancy.CreateRequest) (*vacancy.VacancyResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *vacancy.VacancyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vacancy.CreateRequest) (*vacancy.VacancyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vacancy.CreateRequest) *vacancy.VacancyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vacancy.VacancyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vacancy.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *VacancyServer) GetById(_a0 context.Context, _a1 *vacancy.GetByIdRequest) (*vacancy.VacancyResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *vacancy.VacancyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vacancy.GetByIdRequest) (*vacancy.VacancyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vacancy.GetByIdRequest) *vacancy.VacancyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vacancy.VacancyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vacancy.GetByIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedVacancyServer provides a mock function with given fields:
func (_m *VacancyServer) mustEmbedUnimplementedVacancyServer() {
	_m.Called()
}

// NewVacancyServer creates a new instance of VacancyServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVacancyServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *VacancyServer {
	mock := &VacancyServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
